import fitz  # PyMuPDF
import re

pdf_path = "pdfextract.pdf"
doc = fitz.open(pdf_path)

# Footer/header lines to exclude (case-sensitive)
footer_lines = {
    "This document is confidential and for internal use only.",
    "Page 1 of 30",
}

# Regex patterns
section_start_pattern = re.compile(r'^\d+(\.\d+)*\s')
isa_pattern = re.compile(r'ISA\s\|\s\d+')

# Load and clean lines from pages 15–30
all_lines = []
page_map = []

for page_number in range(14, min(30, len(doc))):  # page 15 = index 14
    visible_page_number = page_number + 1
    page_lines = doc[page_number].get_text().split('\n')
    filtered_lines = [line for line in page_lines if line.strip() not in footer_lines]
    all_lines.extend(filtered_lines)
    page_map.extend([visible_page_number] * len(filtered_lines))

doc.close()

results = []

i = 0
while i < len(all_lines):
    line = all_lines[i].strip()
    if section_start_pattern.match(line):
        combined_line = line
        isa_found = '[ISA' in line
        j = i + 1

        while j < len(all_lines):
            next_line = all_lines[j].strip()
            combined_line += ' ' + next_line
            if '[ISA' in next_line:
                isa_found = True
            j += 1
            if isa_found:
                break

        combined_line = combined_line.strip()

        # Debug print
        print(f"\n[DEBUG] Candidate @ Page {page_map[i]}:")
        print("         ", combined_line)
        print("         ", f"Length: {len(combined_line)}, Contains ISA: {bool(isa_pattern.search(combined_line))}")

        if len(combined_line) < 200 and isa_pattern.search(combined_line):
            section_page = page_map[i]
            what_ans, why_ans, execute_ans = [], [], []
            mode = None

            k = j
            while k < len(all_lines):
                current = all_lines[k].strip()
                if section_start_pattern.match(current):
                    break
                if current.lower().startswith("what do we do?"):
                    mode = "what"
                elif current.lower().startswith("why do we do this?"):
                    mode = "why"
                elif current.lower().startswith("execute the audit"):
                    mode = "execute"
                elif mode == "what":
                    what_ans.append(current)
                elif mode == "why":
                    why_ans.append(current)
                elif mode == "execute":
                    execute_ans.append(current)
                k += 1

            results.append({
                "page": section_page,
                "section": combined_line,
                "what_do_we_do": ' '.join(what_ans).strip(),
                "why_do_we_do_this": ' '.join(why_ans).strip(),
                "execute_the_audit": ' '.join(execute_ans).strip()
            })
        i = max(j, i + 1)  # <-- ADVANCE logic: prevent infinite loop
    else:
        i += 1

# Output results
print("\n\n======== FINAL EXTRACTED SECTIONS ========\n")
for item in results:
    print(f"[Page {item['page']}] {item['section']}")
    print(f"What do we do? -> {item['what_do_we_do']}")
    print(f"Why do we do this? -> {item['why_do_we_do_this']}")
    print(f"Execute the Audit -> {item['execute_the_audit']}\n")
