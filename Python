import pandas as pd
import re
from openpyxl import load_workbook
from openpyxl.styles import PatternFill

# === File Paths ===
base_file = "base.xlsx"
file2 = "file2.xlsx"
file3 = "file3.xlsx"
output_file = "merged_output.xlsx"

# === Section Cleaning Function ===
def clean_section(text):
    if pd.isna(text):
        return ""
    text = re.sub(r'^\d+(\.\d+)*\s+', '', text)
    text = re.sub(r'(ISA|AICA)\s\|\s\d+', '', text)
    return text.strip().lower()

# === Normalize Function ===
def normalize(text):
    if not text:
        return ""
    text = text.replace("\xa0", " ")  # non-breaking spaces
    text = re.sub(r'[^\x00-\x7F]+', '', text)  # remove non-ASCII
    text = re.sub(r'\s+', ' ', text).strip().lower()
    return text

# === Load Excel files ===
df_base = pd.read_excel(base_file)
df2 = pd.read_excel(file2)
df3 = pd.read_excel(file3)

df_base["clean_section"] = df_base["section"].apply(clean_section)
df2["clean_section"] = df2["section"].apply(clean_section)
df3["clean_section"] = df3["section"].apply(clean_section)

df2_unique = df2.drop_duplicates(subset="clean_section")
df3_unique = df3.drop_duplicates(subset="clean_section")
lookup2 = df2_unique.set_index("clean_section").to_dict(orient="index")
lookup3 = df3_unique.set_index("clean_section").to_dict(orient="index")

output_rows = []
matched_keys = set()

for _, row in df_base.iterrows():
    base_row = row.iloc[:5].tolist()
    key = row["clean_section"]

    row2 = lookup2.get(key, {})
    row3 = lookup3.get(key, {})

    if row2 or row3:
        matched_keys.add(key)

    output_row = (
        base_row +
        [row2.get("section", ""), row2.get("page", "")] +
        [row2.get("what_do_we_do", ""), row2.get("why_do_we_do_this", ""), row2.get("execute_the_audit", "")] +
        [row3.get("section", ""), row3.get("page", "")] +
        [row3.get("what_do_we_do", ""), row3.get("why_do_we_do_this", ""), row3.get("execute_the_audit", "")]
    )

    output_rows.append(output_row)

# Unmatched from file2
for _, row in df2_unique.iterrows():
    if row["clean_section"] not in matched_keys:
        output_rows.append(
            [""] * 5 +
            [row["section"], row["page"]] +
            [row.get("what_do_we_do", ""), row.get("why_do_we_do_this", ""), row.get("execute_the_audit", "")] +
            [""] * 5
        )

# Unmatched from file3
for _, row in df3_unique.iterrows():
    if row["clean_section"] not in matched_keys:
        output_rows.append(
            [""] * 10 +
            [row["section"], row["page"]] +
            [row.get("what_do_we_do", ""), row.get("why_do_we_do_this", ""), row.get("execute_the_audit", "")]
        )

columns = (
    df_base.columns[:5].tolist() +
    ["file2_section", "file2_page", "file2_what", "file2_why", "file2_execute"] +
    ["file3_section", "file3_page", "file3_what", "file3_why", "file3_execute"]
)

# Save merged output
df_output = pd.DataFrame(output_rows, columns=columns)
df_output.to_excel(output_file, index=False)
print(f"Comparison complete. Output saved to: {output_file}")

# === Color Coding ===
GREEN = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
PURPLE = PatternFill(start_color="D9D2E9", end_color="D9D2E9", fill_type="solid")
YELLOW = PatternFill(start_color="FFF2CC", end_color="FFF2CC", fill_type="solid")

def compare_text(base, other):
    if not base or not other:
        return YELLOW
    norm_base = normalize(base)
    norm_other = normalize(other)
    if norm_base == norm_other:
        return GREEN
    base_tokens = set(norm_base.split())
    other_tokens = set(norm_other.split())
    return PURPLE if base_tokens.intersection(other_tokens) else YELLOW

# === Apply formatting ===
wb = load_workbook(output_file)
ws = wb.active

header = [cell.value for cell in next(ws.iter_rows(min_row=1, max_row=1))]
# Indexes of file2 and file3 Q&A columns
f2_what_idx = header.index("file2_what") + 1
f2_why_idx = header.index("file2_why") + 1
f2_exec_idx = header.index("file2_execute") + 1
f3_what_idx = header.index("file3_what") + 1
f3_why_idx = header.index("file3_why") + 1
f3_exec_idx = header.index("file3_execute") + 1

# Base file Q&A columns (C, D, E)
base_what_idx = 2
base_why_idx = 3
base_exec_idx = 4

for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
    base_what = row[base_what_idx].value
    base_why = row[base_why_idx].value
    base_exec = row[base_exec_idx].value

    row[f2_what_idx - 1].fill = compare_text(base_what, row[f2_what_idx - 1].value)
    row[f2_why_idx - 1].fill = compare_text(base_why, row[f2_why_idx - 1].value)
    row[f2_exec_idx - 1].fill = compare_text(base_exec, row[f2_exec_idx - 1].value)

    row[f3_what_idx - 1].fill = compare_text(base_what, row[f3_what_idx - 1].value)
    row[f3_why_idx - 1].fill = compare_text(base_why, row[f3_why_idx - 1].value)
    row[f3_exec_idx - 1].fill = compare_text(base_exec, row[f3_exec_idx - 1].value)

wb.save(output_file)
print("Highlights applied to all Q&A fields.")
