from selenium import webdriver
from selenium.webdriver.edge.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time

def scroll_inside_container(driver, container_selector, pause_time=2, max_scrolls=20):
    scroll_script = """
        var container = document.querySelector(arguments[0]);
        if (!container) return -1;
        container.scrollTop = container.scrollHeight;
        return container.scrollHeight;
    """
    last_height = 0
    for _ in range(max_scrolls):
        new_height = driver.execute_script(scroll_script, container_selector)
        if new_height == -1:
            print(f"Scroll container '{container_selector}' not found.")
            break
        if new_height == last_height:
            break
        last_height = new_height
        time.sleep(pause_time)

def extract_and_print_nested_divs(url, class_names, scroll_container_selector):
    options = Options()
    options.use_chromium = True
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-gpu')
    # options.add_argument('--headless')  # Uncomment for headless mode

    driver = webdriver.Edge(options=options)

    try:
        driver.get(url)

        # Wait until the first target class appears
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, class_names[0]))
        )

        # Scroll inside the scrollable container div
        scroll_inside_container(driver, scroll_container_selector)

        html = driver.page_source

    finally:
        driver.quit()

    soup = BeautifulSoup(html, 'html.parser')

    def print_nested_divs(div, level=0):
        indent = "  " * level
        if div.name == 'div':
            text = div.get_text(strip=True)
            if text:
                print(f"{indent}- {text}")
        for child in div.find_all('div', recursive=False):
            print_nested_divs(child, level + 1)

    for cls in class_names:
        divs = soup.find_all('div', class_=cls)
        for div in divs:
            print(f"\n[{cls}]")
            print_nested_divs(div)

# ==== Script Configuration ====
url = "https://example.com"  # Replace with actual target URL
class_list = ['Display1', 'Display2', 'Display3']
scroll_container = '.lfcScroll.row.ng-star-inserted'  # Full CSS selector for scrollable container

# Run extraction
extract_and_print_nested_divs(url, class_list, scroll_container)
