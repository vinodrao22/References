@page "/validate-excel"
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@using Radzen
@using Microsoft.AspNetCore.Components.Forms
@using System.Data

<h3>Excel Column Validation</h3>

<RadzenUpload ChooseText="Select Excel File" @onChange="OnFileSelected" Accept=".xlsx,.xls" />

@if (Columns.Count > 0)
{
    <RadzenListBox TValue="string" @bind-Value="SelectedColumns" Data="@Columns" Multiple="true" Placeholder="Select columns to validate" />

    @if (SelectedColumns.Count > 0)
    {
        <h4>Enter Expected Totals</h4>
        <div>
            @foreach (var column in SelectedColumns)
            {
                <label>@column</label>
                <RadzenNumeric @bind-Value="ExpectedTotals[column]" />
            }
        </div>

        <RadzenButton Text="Validate" Click="ValidateExcel" Style="margin-top:10px;" />
    }
}

@if (ValidationResults.Count > 0)
{
    <h4>Validation Results</h4>
    <RadzenDataGrid Data="@ValidationResults" TItem="ValidationResult" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="ValidationResult" Property="ColumnName" Title="Column Name" />
            <RadzenDataGridColumn TItem="ValidationResult" Property="ExpectedTotal" Title="Expected Total" />
            <RadzenDataGridColumn TItem="ValidationResult" Property="ActualTotal" Title="Actual Total" />
            <RadzenDataGridColumn TItem="ValidationResult" Property="Status" Title="Status" />
        </Columns>
    </RadzenDataGrid>

    <RadzenButton Text="Download Updated Excel" Click="DownloadUpdatedExcel" Style="margin-top:10px;" />
}




using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using ClosedXML.Excel;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Microsoft.AspNetCore.Hosting;
using Radzen;

public partial class Validation
{
    private List<string> Columns = new();
    private List<string> SelectedColumns = new();
    private Dictionary<string, decimal> ExpectedTotals = new();
    private List<ValidationResult> ValidationResults = new();
    private string UploadedFilePath;

    [Inject] IWebHostEnvironment env { get; set; }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            string filePath = Path.Combine(env.WebRootPath, "uploads", e.File.Name);
            using var fileStream = new FileStream(filePath, FileMode.Create);
            await e.File.OpenReadStream().CopyToAsync(fileStream);
            UploadedFilePath = filePath;

            ReadExcelColumns(filePath);
        }
    }

    private void ReadExcelColumns(string filePath)
    {
        using var workbook = new XLWorkbook(filePath);
        var worksheet = workbook.Worksheet(1);
        var firstRow = worksheet.Row(1);

        Columns = firstRow.Cells().Select(cell => cell.Value.ToString()).ToList();
    }

    private void ValidateExcel()
    {
        if (string.IsNullOrEmpty(UploadedFilePath) || SelectedColumns.Count == 0) return;

        using var workbook = new XLWorkbook(UploadedFilePath);
        var worksheet = workbook.Worksheet(1);
        var validationSheet = workbook.Worksheets.Any(w => w.Name == "Validation Report")
            ? workbook.Worksheet("Validation Report")
            : workbook.AddWorksheet("Validation Report");

        validationSheet.Clear();
        validationSheet.Cell(1, 1).Value = "Column Name";
        validationSheet.Cell(1, 2).Value = "Expected Total";
        validationSheet.Cell(1, 3).Value = "Actual Total";
        validationSheet.Cell(1, 4).Value = "Status";

        int rowCount = worksheet.LastRowUsed().RowNumber();
        ValidationResults.Clear();

        int validationRow = 2;
        foreach (var column in SelectedColumns)
        {
            int colIndex = Columns.IndexOf(column) + 1; 
            if (colIndex == 0) continue;

            decimal actualTotal = worksheet.Column(colIndex).CellsUsed().Skip(1)
                .Sum(cell => cell.Value.IsNumber ? cell.Value.GetNumber() : 0);

            decimal expectedTotal = ExpectedTotals[column];

            string status = actualTotal == expectedTotal ? "Match" : "Mismatch";

            ValidationResults.Add(new ValidationResult
            {
                ColumnName = column,
                ExpectedTotal = expectedTotal,
                ActualTotal = actualTotal,
                Status = status
            });

            validationSheet.Cell(validationRow, 1).Value = column;
            validationSheet.Cell(validationRow, 2).Value = expectedTotal;
            validationSheet.Cell(validationRow, 3).Value = actualTotal;
            validationSheet.Cell(validationRow, 4).Value = status;
            validationRow++;
        }

        workbook.Save();
    }

    private async Task DownloadUpdatedExcel()
    {
        var bytes = await File.ReadAllBytesAsync(UploadedFilePath);
        var fileName = Path.GetFileName(UploadedFilePath);
        var contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

        var memoryStream = new MemoryStream(bytes);
        await JS.InvokeVoidAsync("downloadFile", fileName, contentType, memoryStream.ToArray());
    }

    public class ValidationResult
    {
        public string ColumnName { get; set; }
        public decimal ExpectedTotal { get; set; }
        public decimal ActualTotal { get; set; }
        public string Status { get; set; }
    }
}
